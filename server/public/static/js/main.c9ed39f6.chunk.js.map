{"version":3,"sources":["components/auth/AuthService.js","components/navbar/Navbar.js","components/auth/Signup.js","components/auth/Login.js","components/Home/Service.js","components/Home/Home.js","components/contents/Contents.js","App.js","serviceWorker.js","index.js"],"names":["AuthService","signup","username","password","service","post","then","response","data","login","loggedin","get","logout","this","axios","create","baseURL","process","REACT_APP_API_URL","withCredentials","Navbar","props","handleLogout","e","state","loggedInUser","nextProps","setState","className","onClick","Component","Signup","handleFormSubmit","event","preventDefault","getUser","user","catch","error","handleChange","target","name","value","onSubmit","type","onChange","to","Login","Service","getGames","getConsoles","Home","games","consoles","console","log","map","game","src","photo","alt","title","consol","key","_id","consolesModel","React","Contents","App","userObj","fetchUser","err","Fragment","userInSession","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oUAgCeA,EA5Bb,aAAe,IAAD,gCAOdC,OAAS,SAACC,EAAUC,GAClB,OAAO,EAAKC,QAAQC,KAAK,UAAW,CAACH,WAAUC,aAC9CG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SATf,KAYdC,MAAQ,SAACP,EAAUC,GACjB,OAAO,EAAKC,QAAQC,KAAK,SAAU,CAACH,WAAUC,aAC7CG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAdf,KAiBdE,SAAW,WACT,OAAO,EAAKN,QAAQO,IAAI,gBACvBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAnBf,KAsBdI,OAAS,WACP,OAAO,EAAKR,QAAQC,KAAK,WACxBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAvB3BK,KAAKT,QAAUU,IAAMC,OAAO,CAC1BC,QAAQ,GAAD,OAAKC,qKAAYC,kBAAjB,SACPC,iBAAiB,KC0CRC,G,kBAzCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,aAAe,SAAAC,GACb,EAAKF,MAAMT,UATX,EAAKY,MAAQ,CAAEC,aAAc,MAC7B,EAAKrB,QAAU,IAAIJ,EAHF,E,uFAMO0B,GACxBb,KAAKc,SAAL,eAAmBd,KAAKW,MAAxB,CAA+BC,aAAcC,EAAS,mB,+BAQtD,OAAIb,KAAKW,MAAMC,aAEX,yBAAKG,UAAU,aACb,4BACE,4BACE,uBAAGC,QAAShB,KAAKS,cAAjB,YAIJ,yBAAKM,UAAU,UAEb,uCAAaf,KAAKW,MAAMC,aAAavB,SAArC,mBAMJ,6BACE,yBAAK0B,UAAU,mB,GAlCJE,c,gBC2ENC,E,YA1Eb,WAAYV,GAAO,IAAD,8BAChB,4CAAMA,KAKRW,iBAAmB,SAACC,GAClBA,EAAMC,iBACN,IAAMhC,EAAW,EAAKsB,MAAMtB,SACtBC,EAAW,EAAKqB,MAAMrB,SAG5B,EAAKC,QAAQH,OAAOC,EAAUC,GAC7BG,MAAM,SAAAC,GACH,EAAKoB,SAAS,CACVzB,SAAU,GACVC,SAAU,KAKd,EAAKkB,MAAMc,QAAQ5B,EAAS6B,SAE/BC,OAAM,SAAAC,GACL,EAAKX,SAAS,CACZzB,SAAUA,EACVC,SAAUA,EACVmC,OAAO,QA3BK,EAgClBC,aAAe,SAACN,GAAW,IAAD,EACFA,EAAMO,OAArBC,EADiB,EACjBA,KAAMC,EADW,EACXA,MACb,EAAKf,SAAL,eAAgBc,EAAOC,KAhCvB,EAAKlB,MAAQ,CAAEtB,SAAU,GAAIC,SAAU,IACvC,EAAKC,QAAU,IAAIJ,EAHH,E,sEAsCR,IAAD,OACP,OACE,6BACE,sCAEA,0BAAM2C,SAAU9B,KAAKmB,kBACnB,kCACE,4CACA,2BAAOY,KAAK,OAAOH,KAAK,WAAWC,MAAO7B,KAAKW,MAAMtB,SAAU2C,SAAW,SAAAtB,GAAC,OAAI,EAAKgB,aAAahB,OAGnG,kCACE,4CACA,2BAAOqB,KAAK,WAAWH,KAAK,WAAWC,MAAO7B,KAAKW,MAAMrB,SAAU0C,SAAW,SAAAtB,GAAC,OAAI,EAAKgB,aAAahB,OAGvG,2BAAOqB,KAAK,SAASF,MAAM,aAI7B,6BACH,yBAAKd,UAAU,aACb,4BACE,4BACE,kBAAC,IAAD,CAAMkB,GAAG,UAAT,qCAMH,4BAAKjC,KAAKW,MAAMc,MAAQ,QAAU,S,GArErBR,aCuENiB,E,YAxEb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KAKRW,iBAAmB,SAACC,GAClBA,EAAMC,iBACN,IAAMhC,EAAW,EAAKsB,MAAMtB,SACtBC,EAAW,EAAKqB,MAAMrB,SAE5B,EAAKC,QAAQK,MAAMP,EAAUC,GAC1BG,MAAK,SAAAC,GACJ,EAAKoB,SAAS,CACZzB,SAAUA,EACVC,SAAUA,EACVmC,OAAO,IAGT,EAAKjB,MAAMc,QAAQ5B,MAEpB8B,OAAM,SAAAC,GACL,EAAKX,SAAS,CACZzB,SAAUA,EACVC,SAAUA,EACVmC,OAAO,QAzBI,EA8BnBC,aAAe,SAACN,GAAW,IAAD,EACAA,EAAMO,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MACd,EAAKf,SAAL,eAAiBc,EAAOC,KA9BxB,EAAKlB,MAAQ,CAAEtB,SAAU,GAAIC,SAAU,IACvC,EAAKC,QAAU,IAAIJ,EAHF,E,sEAmCT,IAAD,OAEP,OAAQ,6BACN,qCAEA,0BAAM2C,SAAU9B,KAAKmB,kBACnB,kCACE,4CACA,2BAAOY,KAAK,OAAOH,KAAK,WAAWC,MAAO7B,KAAKW,MAAMtB,SAAU2C,SAAU,SAAAtB,GAAC,OAAI,EAAKgB,aAAahB,OAGlG,kCACE,4CACA,2BAAOqB,KAAK,WAAWH,KAAK,WAAWC,MAAO7B,KAAKW,MAAMrB,SAAU0C,SAAU,SAAAtB,GAAC,OAAI,EAAKgB,aAAahB,OAGtG,2BAAOqB,KAAK,SAASF,MAAM,WAG7B,6BACD,yBAAKd,UAAU,aACb,4BACE,4BACE,kBAAC,IAAD,CAAMkB,GAAG,WAAT,+CAML,4BAAKjC,KAAKW,MAAMc,MAAQ,QAAU,S,GAjEpBR,aCeHkB,EAjBf,aAAe,IAAD,gCAOdC,SAAW,WACT,OAAO,EAAK7C,QAAQO,IAAI,KACvBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SATf,KAYd0C,YAAc,WACZ,OAAO,EAAK9C,QAAQO,IAAI,aACvBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAb3BK,KAAKT,QAAUU,IAAMC,OAAO,CAC1BC,QAAQ,GAAD,OAAKC,qKAAYC,kBAAjB,UACPC,iBAAiB,KCwDRgC,E,YAvDb,WAAY9B,GAAO,IAAD,8BAChB,4CAAMA,KACDG,MAAQ,CACX4B,MAAO,GACPC,SAAU,IAEZ,EAAKjD,QAAU,IAAI4C,EANH,E,iFASG,IAAD,OAClBM,QAAQC,IAAI1C,KAAKW,OACjBX,KAAKT,QAAQ6C,WACZ3C,MAAK,SAAAC,GACJ+C,QAAQC,IAAIhD,GACZ,EAAKoB,SAAS,CACZyB,MAAO7C,S,+BAOX,OACI,6BACQ,6BACR,6BACE,qDACCM,KAAKW,MAAM4B,MAAMI,KAAI,SAAAC,GAAI,OACpB,6BACE,yBAAKC,IAAKD,EAAKE,MAAOC,IAAI,KAC5B,4BAAKH,EAAKI,aAMpB,6BACE,6BACE,wDACChD,KAAKW,MAAM6B,SAASG,KAAI,SAAAM,GAAM,OAC3B,yBAAKC,IAAKD,EAAOE,KACf,kBAAC,OAAD,CAAMlB,GAAE,oBAAegB,EAAOE,MAC9B,yBAAKN,IAAKI,EAAOH,MAAOC,IAAI,KAC5B,4BAAKE,EAAOG,2B,GA5CTC,IAAMpC,WCOVqC,E,iLANX,OAAQ,6BACJ,kBAAC,EAAD,W,GAHerC,aCqFRsC,E,YA3Eb,WAAY/C,GAAQ,IAAD,8BACjB,4CAAMA,KAQRc,QAAU,SAAAkC,GACR,EAAK1C,SAAS,CACZF,aAAc4C,KAXC,EAenBzD,OAAS,WACP,EAAKR,QAAQQ,SAASN,MAAK,WACzB,EAAKqB,SAAS,CAAEF,aAAc,WAdhC,EAAKD,MAAQ,CAAEC,aAAc,MAC7B,EAAKrB,QAAU,IAAIJ,EAEnB,EAAKsE,YANY,E,yEAsBN,IAAD,OACV,OAAOzD,KAAKT,QACTM,WACAJ,MAAK,SAAAC,GACJ,EAAKoB,SAAS,CACZF,aAAclB,OAGjB8B,OAAM,SAAAkC,GACL,EAAK5C,SAAS,CACZF,cAAc,S,+BAKZ,IAAD,OAEP,OAAIZ,KAAKW,MAAMC,aAGX,kBAAC,IAAM+C,SAAP,KACE,kBAAC,IAAD,CAAU1B,GAAG,UAEb,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAQ6C,cAAe5D,KAAKW,MAAMC,aAAcb,OAAQC,KAAKD,SAE7D,kBAAC,EAAD,SAQN,kBAAC,IAAM4D,SAAP,KACE,kBAAC,IAAD,CAAU1B,GAAG,WAEb,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAQ6C,cAAe5D,KAAKW,MAAMC,aAAcb,OAAQC,KAAKD,SAC7D,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,CAAQzC,QAAS,EAAKA,aAChE,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,CAAOzC,QAAS,EAAKA,qB,GAnE5DL,aCDE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBO,SAASC,eAAe,SD4H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjF,MAAK,SAAAkF,GACJA,EAAaC,gBAEdpD,OAAM,SAAAC,GACLgB,QAAQhB,MAAMA,EAAMoD,c","file":"static/js/main.c9ed39f6.chunk.js","sourcesContent":["// auth/auth-service.js\nimport axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}/auth`,\n      withCredentials: true\n    });\n  }\n\n  signup = (username, password) => {\n    return this.service.post('/signup', {username, password})\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/login', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/currentUser',)\n    .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.post('/logout',)\n    .then(response => response.data)\n  }\n}\n\nexport default AuthService;","// navbar/Navbar.js\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AuthService from \"../auth/AuthService\";\nimport \"./Navbar.css\"\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ ...this.state, loggedInUser: nextProps[\"userInSession\"] });\n  }\n\n  handleLogout = e => {\n    this.props.logout();\n  };\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <nav className=\"nav-style\">\n          <ul>\n            <li>\n              <a onClick={this.handleLogout}>Logout</a>\n            </li>\n          </ul>\n\n          <div className=\"header\">\n            {/* <img src={logo} alt=\"\" height=\"100\"/> */}\n            <h2>Welcome {this.state.loggedInUser.username} - Ironhacker</h2>\n          </div>\n        </nav>\n      );\n    } else {\n      return (\n        <div>\n          <nav className=\"nav-style\">\n          </nav>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Navbar;\n","// auth/Signup.js\nimport React, { Component } from 'react';\nimport AuthService from './AuthService'\nimport { Link } from 'react-router-dom';\n\n//signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n    \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service.signup(username, password)\n    .then( response => {\n        this.setState({\n            username: \"\", \n            password: \"\",\n        });\n        //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n        this.props.getUser(response.user)\n    })\n    .catch(error => {\n      this.setState({\n        username: username,\n        password: password,\n        error: true\n      });\n    })\n  }\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n      \n\n  render() {\n    return(\n      <div>\n        <h3>Signup</h3>\n\n        <form onSubmit={this.handleFormSubmit}>\n          <fieldset>\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={ e => this.handleChange(e)}/>\n          </fieldset>\n          \n          <fieldset>\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={ e => this.handleChange(e)} />\n          </fieldset>\n          \n          <input type=\"submit\" value=\"Sign up\" />\n        </form>\n\n        {/* aqui va lo de que haga login si tiene cuenta */}\n        <div>\n     <nav className=\"nav-style\">\n       <ul>\n         <li>\n           <Link to=\"/login\">do you have an account? login</Link>\n         </li>\n         </ul>\n         </nav>\n         </div>\n\n        <h1>{this.state.error ? 'Error' : ''}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Signup;","// auth/Signup.js\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from './AuthService'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          error: false\n        });\n\n        this.props.getUser(response)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (<div>\n      <h3>login</h3>\n\n      <form onSubmit={this.handleFormSubmit}>\n        <fieldset>\n          <label>Username:</label>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <fieldset>\n          <label>Password:</label>\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <input type=\"submit\" value=\"Login\" />\n      </form>\n\n      <div>\n     <nav className=\"nav-style\">\n       <ul>\n         <li>\n           <Link to=\"/signup\">You still don't have an account: Signup</Link>\n         </li>\n         </ul>\n         </nav>\n         </div>\n\n      <h1>{this.state.error ? 'Error' : ''}</h1>\n    </div>)\n  \n         \n  }\n  \n}\n\nexport default Login;","import axios from 'axios';\n\nclass Service {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}/games`, //esto va en la ruta de abajo de app.js en el server\n      withCredentials: true\n    });\n  }\n\n  getGames = () => {\n    return this.service.get(\"/\")\n    .then(response => response.data)\n  }\n  \n  getConsoles = () => {\n    return this.service.get(\"/consoles\")\n    .then(response => response.data)\n  }\n}\n  export default Service;","import React from 'react';\nimport { Link } from \"react\";\nimport Service from './Service';\n\n\n\nclass Home extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      games: [],\n      consoles: []\n    }\n    this.service = new Service()\n  }\n\n  componentDidMount() {\n    console.log(this.state)\n    this.service.getGames()\n    .then(response => {\n      console.log(response)\n      this.setState({\n        games: response\n      })\n\n    })\n  }\n\n  render() {\n    return (\n        <div>\n                <div>\n        <div>\n          <h3>our best offers Games</h3>\n          {this.state.games.map(game => (\n                <div>\n                  <img src={game.photo} alt=\"\"/>\n                <h4>{game.title}</h4>\n                </div>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <h3>our best offers Consoles</h3>\n          {this.state.consoles.map(consol => (\n              <div key={consol._id}>\n                <Link to={`/consoles/${consol._id}`}>\n                <img src={consol.photo} alt=\"\"/>\n                <h3>{consol.consolesModel}</h3>\n              </Link>\n              </div>\n          ))}\n        </div>\n      </div>\n        </div>\n      )\n  }\n\n}\n\nexport default Home;\n\n\n\n","import React, { Component } from 'react';\nimport Home from '../Home/Home'\n\n//clase componente que renderiza los contenidos genéricos\n//usando rendering condicional y el componente Switch que ya conocéis podéis mostrar los contenidos oportunos que queráis\nclass Contents extends Component {\n  render() {\n    return (<div>\n        <Home></Home>\n    </div>)\n  }\n}\n\nexport default Contents;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\n// import ProjectList from './components/projects/ProjectList';\nimport Navbar from \"./components/navbar/Navbar\";\n// import ProjectDetails from './components/projects/ProjectDetails';\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport AuthService from \"./components/auth/AuthService\";\nimport Contents from \"./components/contents/Contents\";\n\n//App es la aplicación base, que se sirve del servicio AuthService para conectar con la bbdd\nclass App extends Component {\n  //en el tiempo de construcción de la aplicación, creamos una instancia del authservice\n  constructor(props) {\n    super(props);\n    //arrancamos el estado con un valor de loggedInUser con nada (luego lo vamos a reemplazar con el valor real)\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n\n    this.fetchUser()\n  }\n\n  getUser = userObj => {\n    this.setState({\n      loggedInUser: userObj,\n    });\n  };\n\n  logout = () => {\n    this.service.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  //este método vuelca la información del usuario y lo guarda en el state de app que siempre puedes revisitar\n  fetchUser() {\n    return this.service\n      .loggedin()\n      .then(response => {\n        this.setState({\n          loggedInUser: response,\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loggedInUser: false,\n        });\n      });\n  }\n\n  render() {\n    //aqui hacemos rendering condicional dependiendo de si tenemos un usuario logeado o no\n    if (this.state.loggedInUser) {\n      //en este caso mostramos los contenidos ya que hay usuario\n      return (\n        <React.Fragment>\n          <Redirect to=\"/home\" />\n\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n              {/* aqui simplemente se muestra un lorem ipsum genérico para que veáis contenidos que solo se muestran a usuarios logeados */}\n              <Contents />\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    } else {\n      //si no estás logeado, mostrar opcionalmente o login o signup\n      return (\n        <React.Fragment>\n          <Redirect to=\"/login\" />\n\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n              <Switch>\n                <Route exact path=\"/signup\" render={() => <Signup getUser={this.getUser} />} />\n                <Route exact path=\"/login\" render={() => <Login getUser={this.getUser} />} />\n              </Switch>\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}